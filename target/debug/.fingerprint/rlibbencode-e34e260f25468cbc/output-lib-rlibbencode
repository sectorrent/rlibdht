{"$message_type":"diagnostic","message":"ambiguous wide pointer comparison, the comparison includes metadata which may not be expected","code":{"code":"ambiguous_wide_pointer_comparisons","explanation":null},"level":"warning","spans":[{"file_name":"/home/brad/CLionProjects/rlibbencode/src/variables/bencode_array.rs","byte_start":758,"byte_end":811,"line_start":31,"line_end":31,"column_start":34,"column_end":87,"is_primary":true,"text":[{"text":"        self.l.iter().any(|item| item.as_ref() as *const _ == var.as_ref() as *const _)","highlight_start":34,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ambiguous_wide_pointer_comparisons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `std::ptr::addr_eq` or untyped pointers to only compare their addresses","code":null,"level":"help","spans":[{"file_name":"/home/brad/CLionProjects/rlibbencode/src/variables/bencode_array.rs","byte_start":758,"byte_end":758,"line_start":31,"line_end":31,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"        self.l.iter().any(|item| item.as_ref() as *const _ == var.as_ref() as *const _)","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"std::ptr::addr_eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/brad/CLionProjects/rlibbencode/src/variables/bencode_array.rs","byte_start":783,"byte_end":787,"line_start":31,"line_end":31,"column_start":59,"column_end":63,"is_primary":true,"text":[{"text":"        self.l.iter().any(|item| item.as_ref() as *const _ == var.as_ref() as *const _)","highlight_start":59,"highlight_end":63}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/brad/CLionProjects/rlibbencode/src/variables/bencode_array.rs","byte_start":811,"byte_end":811,"line_start":31,"line_end":31,"column_start":87,"column_end":87,"is_primary":true,"text":[{"text":"        self.l.iter().any(|item| item.as_ref() as *const _ == var.as_ref() as *const _)","highlight_start":87,"highlight_end":87}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/brad/CLionProjects/rlibbencode/src/variables/bencode_array.rs:31:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.l.iter().any(|item| item.as_ref() as *const _ == var.as_ref() as *const _)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.l.iter().any(|item| \u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::addr_eq(\u001b[0m\u001b[0mitem.as_ref() as *const _\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0mvar.as_ref() as *const _\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
